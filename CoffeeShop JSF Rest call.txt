
Change encoding 'windows-1251'

Задача: coffee shop
Приложение по продаже кофе по сети. По сути – CRUD-приложение (Create Read Update Delete). 
Технологии: JSF 2.0+ (фреймворки по вкусу, для JSF 2.0 желательно Primefaces - www.primefaces.org, можно вообще без фреймворков, на голом JSF, не наказуемо), какая-нибудь СУБД (Postgree оптимально), Работа с БД через объектную модель JPA (EclipseLink оптимально). Любой контейнер (напр. GlassFish, JBoss(Wildfly) т.п.)
Надо: сделать страницу заказа, страницу редактирования/удаления заказов и заказа, главную страничку, с которой можно перейти к процессу заказа или редактирования своих заказов.  На каждой страница сделать кнопку перехода к главной странице.
1.	Главная страница:
a.	Делим ее на 2 части. Слева – линк (кнопка?) на создание нового заказа, справа – переход к редактированию своих заказов (должна быть информация о количестве уже созданных заказов)
2.	Страница заказа:
a.	Поле выбора сорта кофе (выпадающий список) – при изменении меняется стоимость заказа;
b.	Доставка – радиобаттоны самостоятельно или курьером – тоже влияет на стоимость (произвольно, хоть +1 рубль);
c.	Количество – повесить конвертер или валидатор (выбор аргументировать), чтобы нельзя было заказать отрицательное количество, ввести можно только цифры (ну и точку) и запретить заказ меньше чем 100 грамм (не резать же пачку ради первого встречного);
d.	Время доставки в формате с – по. По – должен быть больше С. Свой валидатор.
e.	Стоимость заказа.
f.	На последнее поле вешаем свой конвертер, который соберет все с полей формы в единый объект CoffeeOrder (который надо сделать самому);
g.	После нажатия на кнопку «заказать» (неважно, как она будет названа) перейти на главную страницу, на которой показать сообщение, то заказ принят в обработку.
3.	Страница редактирования заказов:
a.	Таблица существующих заказов. Строка – коротко все о заказе (100 гр. Мексикана Магараджип (100% арабика) с 19.00 по 20.00 05.05.2012 курьером – $15) – строку можно формировать конвертером из объекта CoffeeOrder. Доп плюсик за переопределение нужных методов класса Object под свои нужды.
b.	В конце каждой строки 2 кнопки (или ссылки) на редактирование и удаление записи.
c.	Редактирование – переход на страницу редактирования заказа.
d.	Удаление – переход на удаление.
4.	Страница редактирования заказа – см. страницу заказа. Все то же (можно и даже нужно юзать ту же страницу).
5.	Страница удаления. Табличка всей информации о заказе без возможности редактирования и кнопка «Удалить». 
Желательно: 
•	передачу данных от страницы к странице делать разными способами: f:attribute, f:param, f:setPropertyActionListener;
•	конвертеры/валидаторы делать по-разному и в отдельном классе и как метод бина;
•	все метки локализовать, т.е. писать не хардкодом, а брать из файла ресурсов.

Кроме исходников самой программы – скрипт создания базы данных. 

Дополнительно: на стартовой странице отобразить текущий курс, скажем, доллара. Курс взять из REST-сервиса нац. Банка: http://www.nbrb.by/APIHelp/ExRates
